<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{E6F67299-7248-46E4-8379-AD0D91C2A4B6}</ProjectGuid>
    <Keyword>MakeFileProj</Keyword>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v120</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v120</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v120</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v120</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <NMakePreprocessorDefinitions>WIN32;_DEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
    <NMakeReBuildCommandLine>
    </NMakeReBuildCommandLine>
    <NMakeBuildCommandLine>if not exist "$(ProjectDir)$(ProjectName)\tools\build\src\engine\build.bat" echo "Please fetch submodules and try again" &amp; exit
cd $(ProjectDir)$(ProjectName)
if not exist ".\bjam.exe" (call bootstrap.bat) else (echo skipping tools rebuild...)
cd $(ProjectDir)$(ProjectName)
SET ZLIB_SOURCE=$(ProjectDir)zlib
SET VS_UNICODE_OUTPUT=""
.\bjam.exe runtime-link=static threading=multi link=static variant=debug address-model=$(PlatformArchitecture) --layout=system --build-dir=$(SolutionDir)packages --stagedir=$(SolutionDir)packages\boost\build\native
if not exist "$(SolutionDir)packages\boost\build\native\include" (mkdir $(SolutionDir)packages\boost\build\native\include &amp; mklink /j $(SolutionDir)packages\boost\build\native\include\boost $(ProjectDir)$(ProjectName)\boost)
if not exist "$(SolutionDir)packages\boost\build\native\lib\$(Platform)" mkdir $(SolutionDir)packages\boost\build\native\lib\$(Platform)
if not exist "$(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)" mkdir $(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)
move $(SolutionDir)packages\boost\build\native\lib\*.lib $(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)\
</NMakeBuildCommandLine>
    <NMakeAssemblySearchPath>
    </NMakeAssemblySearchPath>
    <ExecutablePath>$(VC_ExecutablePath_x86);$(WindowsSDK_ExecutablePath);$(VS_ExecutablePath);$(MSBuild_ExecutablePath);$(SystemRoot)\SysWow64;$(FxCopDir);$(PATH);</ExecutablePath>
    <NMakeCleanCommandLine>if exist "$(ProjectDir)$(ProjectName)\bjam.exe" (del $(ProjectDir)$(ProjectName)\bjam.exe)
if exist "$(SolutionDir)packages\boost\build\native\lib" rd /s /q $(SolutionDir)packages\boost\build\native\lib
if exist "$(SolutionDir)packages\boost\bin.v2" rd /s /q $(SolutionDir)packages\boost\bin.v2
</NMakeCleanCommandLine>
    <IncludePath>$(IncludePath)</IncludePath>
    <IntDir>$(SolutionDir)packages\boost\bin.v2</IntDir>
    <OutDir>$(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)\</OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <NMakeOutput>
    </NMakeOutput>
    <NMakePreprocessorDefinitions>WIN64;_DEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
    <NMakeBuildCommandLine>if not exist "$(ProjectDir)$(ProjectName)\tools\build\src\engine\build.bat" echo "Please fetch submodules and try again" &amp; exit
cd $(ProjectDir)$(ProjectName)
if not exist ".\bjam.exe" (call bootstrap.bat) else (echo skipping tools rebuild...)
cd $(ProjectDir)$(ProjectName)
SET ZLIB_SOURCE=$(ProjectDir)zlib
SET VS_UNICODE_OUTPUT=""
.\bjam.exe runtime-link=static threading=multi link=static variant=debug address-model=$(PlatformArchitecture) --layout=system --build-dir=$(SolutionDir)packages --stagedir=$(SolutionDir)packages\boost\build\native
if not exist "$(SolutionDir)packages\boost\build\native\include" (mkdir $(SolutionDir)packages\boost\build\native\include &amp; mklink /j $(SolutionDir)packages\boost\build\native\include\boost $(ProjectDir)$(ProjectName)\boost)
if not exist "$(SolutionDir)packages\boost\build\native\lib\$(Platform)" mkdir $(SolutionDir)packages\boost\build\native\lib\$(Platform)
if not exist "$(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)" mkdir $(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)
move $(SolutionDir)packages\boost\build\native\lib\*.lib $(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)\
</NMakeBuildCommandLine>
    <NMakeReBuildCommandLine>
    </NMakeReBuildCommandLine>
    <NMakeCleanCommandLine>if exist "$(ProjectDir)$(ProjectName)\bjam.exe" (del $(ProjectDir)$(ProjectName)\bjam.exe)
if exist "$(SolutionDir)packages\boost\build\native\lib" rd /s /q $(SolutionDir)packages\boost\build\native\lib
if exist "$(SolutionDir)packages\boost\bin.v2" rd /s /q $(SolutionDir)packages\boost\bin.v2
</NMakeCleanCommandLine>
    <IncludePath>$(IncludePath)</IncludePath>
    <IntDir>$(SolutionDir)packages\boost\bin.v2</IntDir>
    <OutDir>$(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\</OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <NMakePreprocessorDefinitions>WIN32;NDEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
    <NMakeReBuildCommandLine>
    </NMakeReBuildCommandLine>
    <NMakeBuildCommandLine>if not exist "$(ProjectDir)$(ProjectName)\tools\build\src\engine\build.bat" echo "Please fetch submodules and try again" &amp; exit
cd $(ProjectDir)$(ProjectName)
if not exist ".\bjam.exe" (call bootstrap.bat) else (echo skipping tools rebuild...)
cd $(ProjectDir)$(ProjectName)
SET ZLIB_SOURCE=$(ProjectDir)zlib
SET VS_UNICODE_OUTPUT=""
.\bjam.exe runtime-link=static threading=multi link=static variant=release address-model=$(PlatformArchitecture) --layout=system --build-dir=$(SolutionDir)packages --stagedir=$(SolutionDir)packages\boost\build\native
if not exist "$(SolutionDir)packages\boost\build\native\include" (mkdir $(SolutionDir)packages\boost\build\native\include &amp; mklink /j $(SolutionDir)packages\boost\build\native\include\boost $(ProjectDir)$(ProjectName)\boost)
if not exist "$(SolutionDir)packages\boost\build\native\lib\$(Platform)" mkdir $(SolutionDir)packages\boost\build\native\lib\$(Platform)
if not exist "$(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)" mkdir $(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)
move $(SolutionDir)packages\boost\build\native\lib\*.lib $(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)\
</NMakeBuildCommandLine>
    <ExecutablePath>$(VC_ExecutablePath_x86);$(WindowsSDK_ExecutablePath);$(VS_ExecutablePath);$(MSBuild_ExecutablePath);$(SystemRoot)\SysWow64;$(FxCopDir);$(PATH);</ExecutablePath>
    <NMakeCleanCommandLine>if exist "$(ProjectDir)$(ProjectName)\bjam.exe" (del $(ProjectDir)$(ProjectName)\bjam.exe)
if exist "$(SolutionDir)packages\boost\build\native\lib" rd /s /q $(SolutionDir)packages\boost\build\native\lib
if exist "$(SolutionDir)packages\boost\bin.v2" rd /s /q $(SolutionDir)packages\boost\bin.v2
</NMakeCleanCommandLine>
    <IncludePath>$(IncludePath)</IncludePath>
    <IntDir>$(SolutionDir)packages\boost\bin.v2</IntDir>
    <OutDir>$(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\</OutDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <NMakeOutput>
    </NMakeOutput>
    <NMakePreprocessorDefinitions>WIN64;NDEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
    <NMakeReBuildCommandLine>
    </NMakeReBuildCommandLine>
    <NMakeBuildCommandLine>if not exist "$(ProjectDir)$(ProjectName)\tools\build\src\engine\build.bat" echo "Please fetch submodules and try again" &amp; exit
cd $(ProjectDir)$(ProjectName)
if not exist ".\bjam.exe" (call bootstrap.bat) else (echo skipping tools rebuild...)
cd $(ProjectDir)$(ProjectName)
SET ZLIB_SOURCE=$(ProjectDir)zlib
SET VS_UNICODE_OUTPUT=""
.\bjam.exe runtime-link=static threading=multi link=static variant=release address-model=$(PlatformArchitecture) --layout=system --build-dir=$(SolutionDir)packages --stagedir=$(SolutionDir)packages\boost\build\native
if not exist "$(SolutionDir)packages\boost\build\native\include" (mkdir $(SolutionDir)packages\boost\build\native\include &amp; mklink /j $(SolutionDir)packages\boost\build\native\include\boost $(ProjectDir)$(ProjectName)\boost)
if not exist "$(SolutionDir)packages\boost\build\native\lib\$(Platform)" mkdir $(SolutionDir)packages\boost\build\native\lib\$(Platform)
if not exist "$(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)" mkdir $(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)
move $(SolutionDir)packages\boost\build\native\lib\*.lib $(SolutionDir)packages\boost\build\native\lib\$(Platform)\$(Configuration)\
</NMakeBuildCommandLine>
    <NMakeCleanCommandLine>if exist "$(ProjectDir)$(ProjectName)\bjam.exe" (del $(ProjectDir)$(ProjectName)\bjam.exe)
if exist "$(SolutionDir)packages\boost\build\native\lib" rd /s /q $(SolutionDir)packages\boost\build\native\lib
if exist "$(SolutionDir)packages\boost\bin.v2" rd /s /q $(SolutionDir)packages\boost\bin.v2
</NMakeCleanCommandLine>
    <IncludePath>$(IncludePath)</IncludePath>
    <IntDir>$(SolutionDir)packages\boost\bin.v2</IntDir>
    <OutDir>$(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\</OutDir>
  </PropertyGroup>
  <ItemDefinitionGroup>
  </ItemDefinitionGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>