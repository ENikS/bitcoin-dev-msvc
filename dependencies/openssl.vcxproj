<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{B7600A5E-BC1C-41F6-B1BE-80EB57932BAB}</ProjectGuid>
    <Keyword>MakeFileProj</Keyword>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v120</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v120</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v120</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Makefile</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v120</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <NMakePreprocessorDefinitions>WIN32;_DEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
    <NMakeCleanCommandLine>del /q $(ProjectDir)$(ProjectName)\ms\*.rc
del /q $(ProjectDir)$(ProjectName)\ms\*.obj
del /q $(ProjectDir)$(ProjectName)\ms\*.mak
del /q $(ProjectDir)$(ProjectName)\ms\*.def
del /q $(ProjectDir)$(ProjectName)\ms\*.asm
del /q $(ProjectDir)$(ProjectName)\ms\*.aps
del /q $(ProjectDir)$(ProjectName)\makefile
del /q $(ProjectDir)$(ProjectName)\Makefile
del /q $(ProjectDir)$(ProjectName)\MINFO
del /q $(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\*.mak
rd /s /q $(ProjectDir)$(ProjectName)\inc32
rd /s /q $(ProjectDir)$(ProjectName)\out32.dbg
rd /s /q $(ProjectDir)$(ProjectName)\tmp32.dbg
rd /s /q $(SolutionDir)packages\$(ProjectName)\build\native\bin
rd /s /q $(SolutionDir)packages\$(ProjectName)\build\native\include
rd /s /q $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)
</NMakeCleanCommandLine>
    <NMakeBuildCommandLine>call "$(VCInstallDir)vcvarsall.bat" x86
cd $(ProjectDir)$(ProjectName) 
if not exist "$(ProjectDir)$(ProjectName)\makefile" perl Configure debug-VC-WIN32 no-asm --prefix=$(SolutionDir)packages\$(ProjectName)\build\native
if exist "$(ProjectDir)$(ProjectName)\ms\version32.rc" del /q $(ProjectDir)$(ProjectName)\ms\version32.rc
if not exist "$(ProjectDir)$(ProjectName)\MINFO" perl util\mkfiles.pl &gt;MINFO
if not exist "$(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\nt.mak" perl util\mk1mf.pl no-asm VC-WIN32 &gt;$(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\nt.mak
nmake -f $(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\nt.mak
if not exist "D:\Work\packages\openssl\build\native\include" xcopy /E D:\Work\openssl\inc32\* D:\Work\packages\openssl\build\native\include\*
if not exist "$(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)" mkdir $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)
if not exist "$(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\" mkdir $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\ &amp; copy $(ProjectDir)$(ProjectName)\out32.dbg\*.lib $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\ &amp; copy $(ProjectDir)$(ProjectName)\tmp32.dbg\lib.pdb $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\
</NMakeBuildCommandLine>
    <OutDir>$(SolutionDir)packages\$(ProjectName)\build\native\</OutDir>
    <IntDir>$(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <NMakePreprocessorDefinitions>WIN32;_DEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
    <NMakeBuildCommandLine>call "$(VCInstallDir)vcvarsall.bat" x64
cd $(ProjectDir)$(ProjectName) 
if not exist "$(ProjectDir)$(ProjectName)\makefile" perl Configure debug-VC-WIN64A no-asm --prefix=$(SolutionDir)packages\$(ProjectName)\build\native
if exist "$(ProjectDir)$(ProjectName)\ms\version32.rc" del /q $(ProjectDir)$(ProjectName)\ms\version32.rc
if not exist "$(ProjectDir)$(ProjectName)\MINFO" perl util\mkfiles.pl &gt;MINFO
if not exist "$(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\nt.mak" perl util\mk1mf.pl no-asm VC-WIN64A  &gt;$(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\nt.mak
nmake -f $(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\nt.mak
if not exist "D:\Work\packages\openssl\build\native\include" xcopy /E D:\Work\openssl\inc32\* D:\Work\packages\openssl\build\native\include\*
if not exist "$(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)" mkdir $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)
if not exist "$(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\" mkdir $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\ &amp; copy $(ProjectDir)$(ProjectName)\out32.dbg\*.lib $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\ &amp; copy $(ProjectDir)$(ProjectName)\tmp32.dbg\lib.pdb $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\
</NMakeBuildCommandLine>
    <NMakeCleanCommandLine>del /q $(ProjectDir)$(ProjectName)\ms\*.rc
del /q $(ProjectDir)$(ProjectName)\ms\*.obj
del /q $(ProjectDir)$(ProjectName)\ms\*.mak
del /q $(ProjectDir)$(ProjectName)\ms\*.def
del /q $(ProjectDir)$(ProjectName)\ms\*.asm
del /q $(ProjectDir)$(ProjectName)\ms\*.aps
del /q $(ProjectDir)$(ProjectName)\makefile
del /q $(ProjectDir)$(ProjectName)\Makefile
del /q $(ProjectDir)$(ProjectName)\MINFO
del /q $(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\*.mak
rd /s /q $(ProjectDir)$(ProjectName)\inc32
rd /s /q $(ProjectDir)$(ProjectName)\out32.dbg
rd /s /q $(ProjectDir)$(ProjectName)\tmp32.dbg
rd /s /q $(SolutionDir)packages\$(ProjectName)\build\native\bin
rd /s /q $(SolutionDir)packages\$(ProjectName)\build\native\include
rd /s /q $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)
</NMakeCleanCommandLine>
    <OutDir>$(SolutionDir)packages\$(ProjectName)\build\native\</OutDir>
    <IntDir>$(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <NMakePreprocessorDefinitions>WIN32;NDEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
    <NMakeBuildCommandLine>call "$(VCInstallDir)vcvarsall.bat" x86
cd $(ProjectDir)$(ProjectName) 
if not exist "$(ProjectDir)$(ProjectName)\makefile" perl Configure VC-WIN32 no-asm --prefix=$(SolutionDir)packages\$(ProjectName)\build\native
if exist "$(ProjectDir)$(ProjectName)\ms\version32.rc" del /q $(ProjectDir)$(ProjectName)\ms\version32.rc
if not exist "$(ProjectDir)$(ProjectName)\MINFO" perl util\mkfiles.pl &gt;MINFO
if not exist "$(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\nt.mak" perl util\mk1mf.pl no-asm VC-WIN32 &gt;$(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\nt.mak
nmake -f $(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\nt.mak
if not exist "D:\Work\packages\openssl\build\native\include" xcopy /E D:\Work\openssl\inc32\* D:\Work\packages\openssl\build\native\include\*
if not exist "$(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)" mkdir $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)
if not exist "$(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\" mkdir $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\ &amp; copy $(ProjectDir)$(ProjectName)\out32\*.lib $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\
</NMakeBuildCommandLine>
    <NMakeReBuildCommandLine>
    </NMakeReBuildCommandLine>
    <NMakeCleanCommandLine>del /q $(ProjectDir)$(ProjectName)\ms\*.rc
del /q $(ProjectDir)$(ProjectName)\ms\*.obj
del /q $(ProjectDir)$(ProjectName)\ms\*.mak
del /q $(ProjectDir)$(ProjectName)\ms\*.def
del /q $(ProjectDir)$(ProjectName)\ms\*.asm
del /q $(ProjectDir)$(ProjectName)\ms\*.aps
del /q $(ProjectDir)$(ProjectName)\makefile
del /q $(ProjectDir)$(ProjectName)\Makefile
del /q $(ProjectDir)$(ProjectName)\MINFO
del /q $(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\*.mak
rd /s /q $(ProjectDir)$(ProjectName)\inc32
rd /s /q $(ProjectDir)$(ProjectName)\out32
rd /s /q $(ProjectDir)$(ProjectName)\tmp32
rd /s /q $(SolutionDir)packages\$(ProjectName)\build\native\bin
rd /s /q $(SolutionDir)packages\$(ProjectName)\build\native\include
rd /s /q $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)
</NMakeCleanCommandLine>
    <OutDir>$(SolutionDir)packages\$(ProjectName)\build\native\</OutDir>
    <IntDir>$(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <NMakePreprocessorDefinitions>WIN32;NDEBUG;$(NMakePreprocessorDefinitions)</NMakePreprocessorDefinitions>
    <NMakeBuildCommandLine>call "$(VCInstallDir)vcvarsall.bat" x64
cd $(ProjectDir)$(ProjectName) 
if not exist "$(ProjectDir)$(ProjectName)\makefile" perl Configure VC-WIN64A no-asm --prefix=$(SolutionDir)packages\$(ProjectName)\build\native
if exist "$(ProjectDir)$(ProjectName)\ms\version32.rc" del /q $(ProjectDir)$(ProjectName)\ms\version32.rc
if not exist "$(ProjectDir)$(ProjectName)\MINFO" perl util\mkfiles.pl &gt;MINFO
if not exist "$(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\nt.mak" perl util\mk1mf.pl no-asm VC-WIN64A  &gt;$(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\nt.mak
nmake -f $(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\nt.mak
if not exist "D:\Work\packages\openssl\build\native\include" xcopy /E D:\Work\openssl\inc32\* D:\Work\packages\openssl\build\native\include\*
if not exist "$(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)" mkdir $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)
if not exist "$(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\" mkdir $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\ &amp; copy $(ProjectDir)$(ProjectName)\out32\*.lib $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)\
</NMakeBuildCommandLine>
    <NMakeCleanCommandLine>del /q $(ProjectDir)$(ProjectName)\ms\*.rc
del /q $(ProjectDir)$(ProjectName)\ms\*.obj
del /q $(ProjectDir)$(ProjectName)\ms\*.mak
del /q $(ProjectDir)$(ProjectName)\ms\*.def
del /q $(ProjectDir)$(ProjectName)\ms\*.asm
del /q $(ProjectDir)$(ProjectName)\ms\*.aps
del /q $(ProjectDir)$(ProjectName)\makefile
del /q $(ProjectDir)$(ProjectName)\Makefile
del /q $(ProjectDir)$(ProjectName)\MINFO
del /q $(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\*.mak
rd /s /q $(ProjectDir)$(ProjectName)\inc32
rd /s /q $(ProjectDir)$(ProjectName)\out32
rd /s /q $(ProjectDir)$(ProjectName)\tmp32
rd /s /q $(SolutionDir)packages\$(ProjectName)\build\native\bin
rd /s /q $(SolutionDir)packages\$(ProjectName)\build\native\include
rd /s /q $(SolutionDir)packages\$(ProjectName)\build\native\lib\$(Platform)\$(Configuration)
</NMakeCleanCommandLine>
    <OutDir>$(SolutionDir)packages\$(ProjectName)\build\native\</OutDir>
    <IntDir>$(ProjectDir)obj\$(Platform)\$(Configuration)\$(ProjectName)\</IntDir>
  </PropertyGroup>
  <ItemDefinitionGroup>
  </ItemDefinitionGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>